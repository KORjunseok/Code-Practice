# "웹 API 짤 때 REST 원칙을 지켜서 짜면 좋아요 오호홍"
이라고 하는데 총 6개의 원칙이 있습니다. 

1. Uniform Interface
인터페이스는 일관성이 있어야한다는 소리가... 뭔소리냐면 
- 하나의 URL로는 하나의 데이터를 가져와야함 (하나를 가져오기 위한 두개의 URL을 만들지 말자)
- 간결하고 예측가능하게 짜세요 (URL 하나를 알면 둘을 알게)
- URL 이름짓기 관습을 잘 따라주세요
이름짓기 관습이 뭔지는 밑에 가서 더 알아보도록 합시다. 

(참고)
다른 곳에서 URL 대신 URI 이런 용어를 많이 쓰기도 하는데 
URI는 자료를 넘버링하고 분류하고 지칭하는 방법이라 보시면 됩니다. URL과 비슷하지만 조금 더 큰 의미입니다. 도서관에서 책 분류할 때 URI에 의해서 분류하기도 합니다. 
 
2. Client-server 역할 구분하기
고객들은 그냥 URL 하나만 알면 서버에 있는 자료를 갖다쓸 수 있습니다. 
고객에게 서버역할을 맡기거나
고객에게 DB에 있는 자료를 직접 꺼내라고 하든지 그런 식으로 코드를 짜시면 안됩니다. 

3. Stateless
요청들은 각각 독립적으로 처리되어야합니다. 
요청1이 성공해야 요청2를 보내주고 그런 식으로 요청간의 의존성이 존재하는 코드를 짜시면 안됩니다. 
다르게 말하면
요청하나 만으로 자료를 가져오기 충분하도록 
요청에 필요한 모든 정보들을 실어 보내는게 좋다는 뜻이겠죠? 

4. Cacheable
요청을 통해 보내는 자료들은 캐싱이 가능해야합니다.
그리고 캐싱가능하다고 표시하거나 캐싱 기간을 설정해주어야 한다고 합니다.

* 캐싱이뭐냐면
네이버를 방문하면 크롬 브라우저는 자동으로 자주 사용하는 이미지 파일, CSS 파일 등을 하드에 저장해놓습니다. 
별로 바뀔일 없는 네이버 로고나 아이콘 같은거요.
하드에 저장해놓고 네이버 방문할 때 네이버서버에 네이버 로고주세요~라고 요청하지 않고 하드에서 불러옵니다.
이 행위를 캐싱이라고 합니다. 

5. Layered System
요청처리하는곳, DB에 저장하는곳 이런 여러가지 단계를 거쳐서 요청을 처리해도 됩니다.
멋있게 말하면 여러개의 레이어를 거쳐서 요청을 처리하게 만들어도 된다고 합니다.
우리도 그렇게 할 것입니다.

6. Code on Demand
서버는 고객에게 실제 실행가능한 코드를 전송해줄 수도 있습니다. 

# Module 사용해보기
// 모듈을 호출했을 때, add 키 값에는 (a,b){return a + b;} 익명함수가 할당되는  방법이다.
exports.add = function (a, b) {
  return a + b;
};

// 모듈을 호출했을 때, add 키 값에는 add 함수가 들어가는 방법이다.
module.exports = { add: add };

// 모듈 그 자체를 바로 add 함수로 할당한다. 
module.exports = add;

# 백앤드 app.js 
const express = require("express");
const app = express();
const port = 3000;
const goodsRouter = require("./routes/goods.js");

app.use(express.json());

// app.use(express.json())로 사용되는 req.body
app.post("/", (req, res) => {
  console.log(req.body);

  res.send("기본 URI에 POST 메소드가 정상적으로 실행되었습니다.");
});

app.get("/", (req, res) => {
  // params의 key와 value 값
  console.log(req.query);

  const obj = {
    keykey: "value 입니다.",
    "이름입니다.": "이름일까요?",
  };
  // obj 객체 변수를 Body 값으로 반환 받음
  res.status(400).json(obj);
  // res.send("정상적으로 반환되었습니다.");
});

app.get("/:id", (req, res) => {
  console.log(req.params);

  res.send(" :id URI에 정상적으로 반환되었습니다.");
});

// app.get("/", (req, res) => {
//   res.send("헬로 월드");
// });

// localhost:3000/api -> goodsRouter
// app.use("/api", goodsRouter);

app.listen(port, () => {
  console.log(port, "포트로 서버가 열렸어요!");
});




